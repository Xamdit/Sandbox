generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:password@localhost:3306/orangehrm"
}

model abstract_display_field {
  id                     BigInt  @id @default(autoincrement())
  report_group_id        BigInt
  name                   String  @db.VarChar(255)
  label                  String  @db.VarChar(255)
  field_alias            String? @db.VarChar(255)
  is_sortable            String  @db.VarChar(10)
  sort_order             String? @db.VarChar(255)
  sort_field             String? @db.VarChar(255)
  element_type           String  @db.VarChar(255)
  element_property       String  @db.Text
  width                  String  @db.VarChar(255)
  is_exportable          String? @db.VarChar(10)
  text_alignment_style   String? @db.VarChar(20)
  is_value_list          Boolean
  display_field_group_id BigInt? @db.UnsignedBigInt
  default_value          String? @db.VarChar(255)
  is_encrypted           Boolean
  is_meta                Boolean @default(false)
}

model config {
  key   String @id @default("") @db.VarChar(100)
  value String @db.Text
}

model country {
  cou_code            String                @id @default("") @db.Char(2)
  name                String                @default("") @db.VarChar(80)
  cou_name            String                @default("") @db.VarChar(80)
  iso3                String?               @db.Char(3)
  numcode             Int?                  @db.SmallInt
  location            location[]
  operational_country operational_country[]
}

model currency_type {
  code               Int                  @default(0)
  currency_id        String               @id @default("") @db.Char(3)
  currency_name      String               @default("") @db.VarChar(70)
  emp_basicsalary    emp_basicsalary[]
  pay_grade_currency pay_grade_currency[]
}

model custom_export {
  export_id Int     @id
  name      String  @db.VarChar(250)
  fields    String? @db.Text
  headings  String? @db.Text

  @@index([export_id], map: "emp_number")
}

model custom_fields {
  field_num  Int     @id
  name       String  @db.VarChar(250)
  type       Int
  screen     String? @db.VarChar(100)
  extra_data String? @db.VarChar(250)

  @@index([field_num], map: "emp_number")
  @@index([screen], map: "screen")
}

model custom_import {
  import_id   Int      @id
  name        String   @db.VarChar(250)
  fields      String?  @db.Text
  has_heading Boolean? @default(false)

  @@index([import_id], map: "emp_number")
}

model district {
  district_code String  @id @default("") @db.VarChar(13)
  district_name String? @db.VarChar(50)
  province_code String? @db.VarChar(13)
}

model emp_attachment {
  emp_number         Int       @default(0)
  eattach_id         Int       @default(0)
  eattach_desc       String?   @db.VarChar(200)
  eattach_filename   String?   @db.VarChar(100)
  eattach_size       Int?      @default(0)
  eattach_attachment Bytes?    @db.MediumBlob
  eattach_type       String?   @db.VarChar(200)
  screen             String?   @default("") @db.VarChar(100)
  attached_by        Int?
  attached_by_name   String?   @db.VarChar(200)
  attached_time      DateTime? @default(now()) @db.Timestamp(0)
  employee           employee  @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_attachment_ibfk_1")

  @@id([emp_number, eattach_id])
  @@index([screen], map: "screen")
}

model emp_basicsalary {
  id                 Int               @id @default(autoincrement())
  emp_number         Int               @default(0)
  sal_grd_code       Int?
  currency_id        String            @default("") @db.VarChar(6)
  ebsal_basic_salary String?           @db.VarChar(100)
  payperiod_code     String?           @db.VarChar(13)
  salary_component   String?           @db.VarChar(100)
  comments           String?           @db.VarChar(255)
  pay_grade          pay_grade?        @relation(fields: [sal_grd_code], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "emp_basicsalary_ibfk_1")
  currency_type      currency_type     @relation(fields: [currency_id], references: [currency_id], onDelete: Cascade, onUpdate: Restrict, map: "emp_basicsalary_ibfk_2")
  employee           employee          @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_basicsalary_ibfk_3")
  payperiod          payperiod?        @relation(fields: [payperiod_code], references: [payperiod_code], onDelete: Cascade, onUpdate: Restrict, map: "emp_basicsalary_ibfk_4")
  emp_directdebit    emp_directdebit[]

  @@index([currency_id], map: "currency_id")
  @@index([emp_number], map: "emp_number")
  @@index([payperiod_code], map: "payperiod_code")
  @@index([sal_grd_code], map: "sal_grd_code")
}

model emp_children {
  emp_number       Int       @default(0)
  ec_seqno         Decimal   @default(0) @db.Decimal(2, 0)
  ec_name          String?   @default("") @db.VarChar(100)
  ec_date_of_birth DateTime? @db.Date
  employee         employee  @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_children_ibfk_1")

  @@id([emp_number, ec_seqno])
}

model emp_contract_extend {
  emp_number             Int       @default(0)
  econ_extend_id         Decimal   @default(0) @db.Decimal(10, 0)
  econ_extend_start_date DateTime? @db.DateTime(0)
  econ_extend_end_date   DateTime? @db.DateTime(0)
  employee               employee  @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_contract_extend_ibfk_1")

  @@id([emp_number, econ_extend_id])
}

model emp_dependents {
  emp_number           Int                                  @default(0)
  ed_seqno             Decimal                              @default(0) @db.Decimal(2, 0)
  ed_name              String?                              @default("") @db.VarChar(100)
  ed_relationship_type emp_dependents_ed_relationship_type?
  ed_relationship      String?                              @default("") @db.VarChar(100)
  ed_date_of_birth     DateTime?                            @db.Date
  employee             employee                             @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_dependents_ibfk_1")

  @@id([emp_number, ed_seqno])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model emp_directdebit {
  id                  Int             @id @default(autoincrement())
  salary_id           Int
  dd_routing_num      Int
  dd_account          String          @default("") @db.VarChar(100)
  dd_amount           Decimal         @db.Decimal(11, 2)
  dd_account_type     String          @default("") @db.VarChar(20)
  dd_transaction_type String          @default("") @db.VarChar(20)
  emp_basicsalary     emp_basicsalary @relation(fields: [salary_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "emp_directdebit_ibfk_1")

  @@index([salary_id], map: "salary_id")
}

model emp_emergency_contacts {
  emp_number       Int      @default(0)
  eec_seqno        Decimal  @default(0) @db.Decimal(2, 0)
  eec_name         String?  @default("") @db.VarChar(100)
  eec_relationship String?  @default("") @db.VarChar(100)
  eec_home_no      String?  @default("") @db.VarChar(100)
  eec_mobile_no    String?  @default("") @db.VarChar(100)
  eec_office_no    String?  @default("") @db.VarChar(100)
  employee         employee @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_emergency_contacts_ibfk_1")

  @@id([emp_number, eec_seqno])
}

model emp_history_of_ealier_pos {
  emp_number      Int      @default(0)
  emp_seqno       Decimal  @default(0) @db.Decimal(2, 0)
  ehoep_job_title String?  @default("") @db.VarChar(100)
  ehoep_years     String?  @default("") @db.VarChar(100)
  employee        employee @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_history_of_ealier_pos_ibfk_1")

  @@id([emp_number, emp_seqno])
}

model emp_language {
  emp_number Int      @default(0)
  lang_id    Int
  fluency    Int      @default(0) @db.SmallInt
  competency Int?     @default(0) @db.SmallInt
  comments   String?  @db.VarChar(100)
  employee   employee @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_language_ibfk_1")
  language   language @relation(fields: [lang_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "emp_language_ibfk_2")

  @@id([emp_number, lang_id, fluency])
  @@index([lang_id], map: "lang_id")
}

model emp_locations {
  emp_number  Int
  location_id Int
  location    location @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "emp_locations_ibfk_1")
  employee    employee @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_locations_ibfk_2")

  @@id([emp_number, location_id])
  @@index([location_id], map: "location_id")
}

model emp_member_detail {
  id                        Int        @id @default(autoincrement())
  emp_number                Int        @default(0)
  membship_code             Int        @default(0)
  ememb_subscript_ownership String?    @db.VarChar(20)
  ememb_subscript_amount    Decimal?   @db.Decimal(15, 2)
  ememb_subs_currency       String?    @db.VarChar(20)
  ememb_commence_date       DateTime?  @db.Date
  ememb_renewal_date        DateTime?  @db.Date
  membership                membership @relation(fields: [membship_code], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "emp_member_detail_ibfk_1")
  employee                  employee   @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_member_detail_ibfk_2")

  @@index([emp_number], map: "emp_number")
  @@index([membship_code], map: "membship_code")
}

model emp_passport {
  emp_number            Int       @default(0)
  ep_seqno              Decimal   @default(0) @db.Decimal(2, 0)
  ep_passport_num       String    @default("") @db.VarChar(100)
  ep_passportissueddate DateTime? @db.DateTime(0)
  ep_passportexpiredate DateTime? @db.DateTime(0)
  ep_comments           String?   @db.VarChar(255)
  ep_passport_type_flg  Int?      @db.SmallInt
  ep_i9_status          String?   @default("") @db.VarChar(100)
  ep_i9_review_date     DateTime? @db.Date
  cou_code              String?   @db.VarChar(6)
  employee              employee  @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_passport_ibfk_1")

  @@id([emp_number, ep_seqno])
}

model emp_picture {
  emp_number       Int      @id @default(0)
  epic_picture     Bytes?   @db.MediumBlob
  epic_filename    String?  @db.VarChar(100)
  epic_type        String?  @db.VarChar(50)
  epic_file_size   String?  @db.VarChar(20)
  epic_file_width  String?  @db.VarChar(20)
  epic_file_height String?  @db.VarChar(20)
  employee         employee @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_picture_ibfk_1")
}

model emp_reportto {
  erep_sup_emp_number                                 Int                  @default(0)
  erep_sub_emp_number                                 Int                  @default(0)
  erep_reporting_mode                                 Int                  @default(0)
  employee_emp_reportto_erep_sup_emp_numberToemployee employee             @relation("emp_reportto_erep_sup_emp_numberToemployee", fields: [erep_sup_emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_reportto_ibfk_1")
  employee_emp_reportto_erep_sub_emp_numberToemployee employee             @relation("emp_reportto_erep_sub_emp_numberToemployee", fields: [erep_sub_emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_reportto_ibfk_2")
  emp_reporting_method                                emp_reporting_method @relation(fields: [erep_reporting_mode], references: [reporting_method_id], onDelete: Cascade, onUpdate: Restrict, map: "emp_reportto_ibfk_3")

  @@id([erep_sup_emp_number, erep_sub_emp_number, erep_reporting_mode])
  @@index([erep_reporting_mode], map: "erep_reporting_mode")
  @@index([erep_sub_emp_number], map: "erep_sub_emp_number")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model emp_skill {
  emp_number   Int      @default(0)
  skill_id     Int
  years_of_exp Decimal? @db.Decimal(2, 0)
  comments     String   @default("") @db.VarChar(100)
  employee     employee @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_skill_ibfk_1")
  skill        skill    @relation(fields: [skill_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "emp_skill_ibfk_2")

  @@index([emp_number], map: "emp_number")
  @@index([skill_id], map: "skill_id")
  @@ignore
}

model emp_us_tax {
  emp_number             Int      @id @default(0)
  tax_federal_status     String?  @db.VarChar(13)
  tax_federal_exceptions Int?     @default(0)
  tax_state              String?  @db.VarChar(13)
  tax_state_status       String?  @db.VarChar(13)
  tax_state_exceptions   Int?     @default(0)
  tax_unemp_state        String?  @db.VarChar(13)
  tax_work_state         String?  @db.VarChar(13)
  employee               employee @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_us_tax_ibfk_1")
}

model emp_work_experience {
  emp_number     Int       @default(0)
  eexp_seqno     Decimal   @default(0) @db.Decimal(10, 0)
  eexp_employer  String?   @db.VarChar(100)
  eexp_jobtit    String?   @db.VarChar(120)
  eexp_from_date DateTime? @db.DateTime(0)
  eexp_to_date   DateTime? @db.DateTime(0)
  eexp_comments  String?   @db.VarChar(200)
  eexp_internal  Int?
  employee       employee  @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_work_experience_ibfk_1")

  @@id([emp_number, eexp_seqno])
}

model employee {
  emp_number                                               Int                            @id @default(autoincrement())
  employee_id                                              String?                        @db.VarChar(50)
  emp_lastname                                             String                         @default("") @db.VarChar(100)
  emp_firstname                                            String                         @default("") @db.VarChar(100)
  emp_middle_name                                          String                         @default("") @db.VarChar(100)
  emp_nick_name                                            String?                        @default("") @db.VarChar(100)
  emp_smoker                                               Int?                           @default(0) @db.SmallInt
  ethnic_race_code                                         String?                        @db.VarChar(13)
  emp_birthday                                             DateTime?                      @db.Date
  nation_code                                              Int?
  emp_gender                                               Int?                           @db.SmallInt
  emp_marital_status                                       String?                        @db.VarChar(20)
  emp_ssn_num                                              String?                        @default("") @db.VarChar(100)
  emp_sin_num                                              String?                        @default("") @db.VarChar(100)
  emp_other_id                                             String?                        @default("") @db.VarChar(100)
  emp_dri_lice_num                                         String?                        @default("") @db.VarChar(100)
  emp_dri_lice_exp_date                                    DateTime?                      @db.Date
  emp_military_service                                     String?                        @default("") @db.VarChar(100)
  emp_status                                               Int?
  job_title_code                                           Int?
  eeo_cat_code                                             Int?
  work_station                                             Int?
  emp_street1                                              String?                        @default("") @db.VarChar(100)
  emp_street2                                              String?                        @default("") @db.VarChar(100)
  city_code                                                String?                        @default("") @db.VarChar(100)
  coun_code                                                String?                        @default("") @db.VarChar(100)
  provin_code                                              String?                        @default("") @db.VarChar(100)
  emp_zipcode                                              String?                        @db.VarChar(20)
  emp_hm_telephone                                         String?                        @db.VarChar(50)
  emp_mobile                                               String?                        @db.VarChar(50)
  emp_work_telephone                                       String?                        @db.VarChar(50)
  emp_work_email                                           String?                        @db.VarChar(50)
  sal_grd_code                                             String?                        @db.VarChar(13)
  joined_date                                              DateTime?                      @db.Date
  emp_oth_email                                            String?                        @db.VarChar(50)
  termination_id                                           Int?
  custom1                                                  String?                        @db.VarChar(250)
  custom2                                                  String?                        @db.VarChar(250)
  custom3                                                  String?                        @db.VarChar(250)
  custom4                                                  String?                        @db.VarChar(250)
  custom5                                                  String?                        @db.VarChar(250)
  custom6                                                  String?                        @db.VarChar(250)
  custom7                                                  String?                        @db.VarChar(250)
  custom8                                                  String?                        @db.VarChar(250)
  custom9                                                  String?                        @db.VarChar(250)
  custom10                                                 String?                        @db.VarChar(250)
  purged_at                                                DateTime?                      @db.Timestamp(0)
  emp_attachment                                           emp_attachment[]
  emp_basicsalary                                          emp_basicsalary[]
  emp_children                                             emp_children[]
  emp_contract_extend                                      emp_contract_extend[]
  emp_dependents                                           emp_dependents[]
  emp_emergency_contacts                                   emp_emergency_contacts[]
  emp_history_of_ealier_pos                                emp_history_of_ealier_pos[]
  emp_language                                             emp_language[]
  emp_locations                                            emp_locations[]
  emp_member_detail                                        emp_member_detail[]
  emp_passport                                             emp_passport[]
  emp_picture                                              emp_picture?
  emp_reportto_emp_reportto_erep_sup_emp_numberToemployee  emp_reportto[]                 @relation("emp_reportto_erep_sup_emp_numberToemployee")
  emp_reportto_emp_reportto_erep_sub_emp_numberToemployee  emp_reportto[]                 @relation("emp_reportto_erep_sub_emp_numberToemployee")
  emp_skill                                                emp_skill[]                    @ignore
  emp_us_tax                                               emp_us_tax?
  emp_work_experience                                      emp_work_experience[]
  subunit                                                  subunit?                       @relation(fields: [work_station], references: [id], onUpdate: Restrict, map: "employee_ibfk_1")
  nationality                                              nationality?                   @relation(fields: [nation_code], references: [id], onUpdate: Restrict, map: "employee_ibfk_2")
  job_title                                                job_title?                     @relation(fields: [job_title_code], references: [id], onUpdate: Restrict, map: "employee_ibfk_3")
  employment_status                                        employment_status?             @relation(fields: [emp_status], references: [id], onUpdate: Restrict, map: "employee_ibfk_4")
  job_category                                             job_category?                  @relation(fields: [eeo_cat_code], references: [id], onUpdate: Restrict, map: "employee_ibfk_5")
  emp_termination_employee_termination_idToemp_termination emp_termination?               @relation("employee_termination_idToemp_termination", fields: [termination_id], references: [id], onUpdate: Restrict, map: "employee_ibfk_6")
  buzz_comment                                             buzz_comment[]
  buzz_like_on_comment                                     buzz_like_on_comment[]
  buzz_like_on_share                                       buzz_like_on_share[]
  buzz_notification_metadata                               buzz_notification_metadata?
  buzz_post                                                buzz_post[]
  buzz_share                                               buzz_share[]
  buzz_unlike_on_comment                                   buzz_unlike_on_comment[]
  buzz_unlike_on_share                                     buzz_unlike_on_share[]
  emp_education                                            emp_education[]
  emp_license                                              emp_license[]
  emp_termination_emp_termination_emp_numberToemployee     emp_termination[]              @relation("emp_termination_emp_numberToemployee")
  employee_work_shift                                      employee_work_shift[]
  job_candidate                                            job_candidate[]
  job_candidate_history                                    job_candidate_history[]
  job_interview_interviewer                                job_interview_interviewer[]
  job_vacancy                                              job_vacancy[]
  leave_adjustment                                         leave_adjustment[]
  leave_comment                                            leave_comment[]
  leave_entitlement                                        leave_entitlement[]
  leave_request                                            leave_request[]
  leave_request_comment                                    leave_request_comment[]
  performance_review                                       performance_review[]
  performance_track_performance_track_emp_numberToemployee performance_track[]            @relation("performance_track_emp_numberToemployee")
  performance_track_performance_track_added_byToemployee   performance_track[]            @relation("performance_track_added_byToemployee")
  performance_tracker_log                                  performance_tracker_log[]
  performance_tracker_reviewer                             performance_tracker_reviewer[]
  project_admin                                            project_admin[]
  user                                                     user[]

  @@index([eeo_cat_code], map: "eeo_cat_code")
  @@index([emp_status], map: "emp_status")
  @@index([job_title_code], map: "job_title_code")
  @@index([nation_code], map: "nation_code")
  @@index([termination_id], map: "termination_id")
  @@index([work_station], map: "work_station")
}

model jobtit_empstat {
  jobtit_code       Int
  estat_code        Int
  job_title         job_title         @relation(fields: [jobtit_code], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "jobtit_empstat_ibfk_1")
  employment_status employment_status @relation(fields: [estat_code], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "jobtit_empstat_ibfk_2")

  @@id([jobtit_code, estat_code])
  @@index([estat_code], map: "estat_code")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model mailnotifications {
  user_id              Int
  notification_type_id Int
  status               Int
  email                String? @db.VarChar(100)
  user                 user    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mailnotifications_ibfk_1")

  @@index([notification_type_id], map: "notification_type_id")
  @@index([user_id], map: "user_id")
  @@ignore
}

model module {
  mod_id      String  @id @default("") @db.VarChar(36)
  name        String? @db.VarChar(45)
  owner       String? @db.VarChar(45)
  owner_email String? @db.VarChar(100)
  version     String? @db.VarChar(36)
  description String? @db.Text
}

model pay_period {
  id                         Int      @id
  start_date                 DateTime @db.Date
  end_date                   DateTime @db.Date
  close_date                 DateTime @db.Date
  check_date                 DateTime @db.Date
  timesheet_aproval_due_date DateTime @db.Date
}

model payperiod {
  payperiod_code  String            @id @default("") @db.VarChar(13)
  payperiod_name  String?           @db.VarChar(100)
  emp_basicsalary emp_basicsalary[]
}

model province {
  id            Int    @id @default(autoincrement())
  province_name String @default("") @db.VarChar(40)
  province_code String @default("") @db.Char(2)
  cou_code      String @default("us") @db.Char(2)
}

model unique_id {
  id         Int    @id @default(autoincrement())
  last_id    Int    @db.UnsignedInt
  table_name String @db.VarChar(50)
  field_name String @db.VarChar(50)

  @@unique([table_name, field_name], map: "table_field")
}

model advanced_report {
  id         Int    @id
  name       String @db.VarChar(100)
  definition String @db.LongText
}

model attendance_record {
  id                    BigInt    @id @default(autoincrement())
  employee_id           BigInt
  punch_in_utc_time     DateTime? @db.DateTime(0)
  punch_in_note         String?   @db.VarChar(255)
  punch_in_time_offset  String?   @db.VarChar(255)
  punch_in_user_time    DateTime? @db.DateTime(0)
  punch_out_utc_time    DateTime? @db.DateTime(0)
  punch_out_note        String?   @db.VarChar(255)
  punch_out_time_offset String?   @db.VarChar(255)
  punch_out_user_time   DateTime? @db.DateTime(0)
  state                 String    @db.VarChar(255)

  @@index([employee_id, state], map: "emp_id_state")
  @@index([employee_id, punch_in_utc_time, punch_out_utc_time], map: "emp_id_time")
}

model auth_provider_extra_details {
  id              Int             @id @default(autoincrement())
  provider_id     Int
  provider_type   Int?
  client_id       String?         @db.Text
  client_secret   String?         @db.Text
  developer_key   String?         @db.Text
  openid_provider openid_provider @relation(fields: [provider_id], references: [id], onDelete: Cascade, map: "auth_provider_extra_details_ibfk_1")

  @@index([provider_id], map: "provider_id")
}

model available_group_field {
  report_group_id BigInt
  group_field_id  BigInt
  group_field     group_field @relation(fields: [group_field_id], references: [group_field_id], onUpdate: Restrict, map: "available_group_field_ibfk_1")

  @@id([report_group_id, group_field_id])
  @@index([group_field_id], map: "group_field_id")
  @@index([report_group_id], map: "report_group_id")
}

model beacon_notification {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  expiry_date DateTime @db.Timestamp(0)
  definition  String   @db.LongText
}

model buzz_comment {
  id                     BigInt                   @id @default(autoincrement())
  share_id               BigInt
  employee_number        Int?
  number_of_likes        Int?
  number_of_unlikes      Int?
  comment_text           String?                  @db.Text
  comment_time           DateTime                 @db.DateTime(0)
  updated_at             DateTime?                @default(now()) @db.Timestamp(0)
  buzz_share             buzz_share               @relation(fields: [share_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "buzzComentOnShare")
  employee               employee?                @relation(fields: [employee_number], references: [emp_number], onDelete: Cascade, onUpdate: NoAction, map: "buzzComentedEmployee")
  buzz_like_on_comment   buzz_like_on_comment[]
  buzz_unlike_on_comment buzz_unlike_on_comment[]

  @@index([employee_number], map: "employee_number")
  @@index([share_id], map: "share_id")
}

model buzz_like_on_comment {
  id              BigInt       @id @default(autoincrement())
  comment_id      BigInt
  employee_number Int?
  like_time       DateTime     @db.DateTime(0)
  employee        employee?    @relation(fields: [employee_number], references: [emp_number], onDelete: Cascade, onUpdate: NoAction, map: "buzzCommentLikeEmployee")
  buzz_comment    buzz_comment @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "buzzLikeOnComment")

  @@index([comment_id], map: "comment_id")
  @@index([employee_number], map: "employee_number")
}

model buzz_like_on_share {
  id              BigInt     @id @default(autoincrement())
  share_id        BigInt
  employee_number Int?
  like_time       DateTime   @db.DateTime(0)
  buzz_share      buzz_share @relation(fields: [share_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "buzzLikeOnshare")
  employee        employee?  @relation(fields: [employee_number], references: [emp_number], onDelete: Cascade, onUpdate: NoAction, map: "buzzShareLikeEmployee")

  @@index([employee_number], map: "employee_number")
  @@index([share_id], map: "share_id")
}

model buzz_link {
  id          BigInt    @id @default(autoincrement())
  post_id     BigInt
  link        String    @db.Text
  type        Int?      @db.TinyInt
  title       String?   @db.VarChar(600)
  description String?   @db.Text
  buzz_post   buzz_post @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "linkAttached")

  @@index([post_id], map: "attachment_id")
  @@index([post_id], map: "photo_id")
}

model buzz_notification_metadata {
  emp_number                  Int       @id
  last_notification_view_time DateTime? @db.DateTime(0)
  last_buzz_view_time         DateTime? @db.DateTime(0)
  last_clear_notifications    DateTime? @db.DateTime(0)
  employee                    employee  @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: NoAction, map: "notificationMetadata")
}

model buzz_photo {
  id        BigInt    @id @default(autoincrement())
  post_id   BigInt
  photo     Bytes?    @db.MediumBlob
  filename  String?   @db.VarChar(100)
  file_type String?   @db.VarChar(50)
  size      String?   @db.VarChar(20)
  width     String?   @db.VarChar(20)
  height    String?   @db.VarChar(20)
  buzz_post buzz_post @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "photoAttached")

  @@index([post_id], map: "attachment_id")
}

model buzz_post {
  id              BigInt       @id @default(autoincrement())
  employee_number Int?
  text            String?      @db.Text
  post_time       DateTime     @db.DateTime(0)
  updated_at      DateTime?    @default(now()) @db.Timestamp(0)
  buzz_link       buzz_link[]
  buzz_photo      buzz_photo[]
  employee        employee?    @relation(fields: [employee_number], references: [emp_number], onDelete: Cascade, onUpdate: NoAction, map: "buzzPostEmployee")
  buzz_share      buzz_share[]

  @@index([employee_number], map: "employee_number")
}

model buzz_share {
  id                   BigInt                 @id @default(autoincrement())
  post_id              BigInt
  employee_number      Int?
  number_of_likes      Int?
  number_of_unlikes    Int?
  number_of_comments   Int?
  share_time           DateTime               @db.DateTime(0)
  type                 Boolean?
  text                 String?                @db.Text
  updated_at           DateTime?              @default(now()) @db.Timestamp(0)
  buzz_comment         buzz_comment[]
  buzz_like_on_share   buzz_like_on_share[]
  employee             employee?              @relation(fields: [employee_number], references: [emp_number], onDelete: Cascade, onUpdate: NoAction, map: "buzzShareEmployee")
  buzz_post            buzz_post              @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "buzzSharePost")
  buzz_unlike_on_share buzz_unlike_on_share[]

  @@index([employee_number], map: "employee_number")
  @@index([post_id], map: "post_id")
}

model buzz_unlike_on_comment {
  id              BigInt       @id @default(autoincrement())
  comment_id      BigInt
  employee_number Int?
  like_time       DateTime     @db.DateTime(0)
  employee        employee?    @relation(fields: [employee_number], references: [emp_number], onDelete: Cascade, onUpdate: NoAction, map: "buzzCommentUnLikeEmployee")
  buzz_comment    buzz_comment @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "buzzUnLikeOnComment")

  @@index([comment_id], map: "comment_id")
  @@index([employee_number], map: "employee_number")
}

model buzz_unlike_on_share {
  id              BigInt     @id @default(autoincrement())
  share_id        BigInt
  employee_number Int?
  like_time       DateTime   @db.DateTime(0)
  employee        employee?  @relation(fields: [employee_number], references: [emp_number], onDelete: Cascade, onUpdate: NoAction, map: "buzzShareUnLikeEmployee")
  buzz_share      buzz_share @relation(fields: [share_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "buzzUNLikeOnshare")

  @@index([employee_number], map: "employee_number")
  @@index([share_id], map: "share_id")
}

model composite_display_field {
  composite_display_field_id       BigInt                             @id @default(autoincrement())
  report_group_id                  BigInt
  name                             String                             @db.VarChar(1000)
  label                            String                             @db.VarChar(255)
  field_alias                      String?                            @db.VarChar(255)
  is_sortable                      String                             @db.VarChar(10)
  sort_order                       String?                            @db.VarChar(255)
  sort_field                       String?                            @db.VarChar(255)
  element_type                     String                             @db.VarChar(255)
  element_property                 String                             @db.VarChar(1000)
  width                            String                             @db.VarChar(255)
  is_exportable                    String?                            @db.VarChar(10)
  text_alignment_style             String?                            @db.VarChar(20)
  is_value_list                    Boolean                            @default(false)
  display_field_group_id           Int?                               @db.UnsignedInt
  default_value                    String?                            @db.VarChar(255)
  is_encrypted                     Boolean                            @default(false)
  is_meta                          Boolean                            @default(false)
  report_group                     report_group                       @relation(fields: [report_group_id], references: [report_group_id], onDelete: Cascade, onUpdate: Restrict, map: "composite_display_field_ibfk_1")
  display_field_group              display_field_group?               @relation(fields: [display_field_group_id], references: [id], onUpdate: Restrict, map: "composite_display_field_ibfk_2")
  selected_composite_display_field selected_composite_display_field[]

  @@index([display_field_group_id], map: "display_field_group_id")
  @@index([report_group_id], map: "report_group_id")
}

model customer {
  customer_id Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(255)
  is_deleted  Boolean? @default(false)
}

model data_group {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique(map: "name") @db.VarChar(255)
  description          String?                @db.VarChar(255)
  can_read             Int?                   @db.TinyInt
  can_create           Int?                   @db.TinyInt
  can_update           Int?                   @db.TinyInt
  can_delete           Int?                   @db.TinyInt
  data_group_screen    data_group_screen[]
  user_role_data_group user_role_data_group[]
}

model data_group_screen {
  id            Int         @id @default(autoincrement())
  data_group_id Int?
  screen_id     Int?
  permission    Int?
  data_group    data_group? @relation(fields: [data_group_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "data_group_screen_ibfk_1")
  screen        screen?     @relation(fields: [screen_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "data_group_screen_ibfk_2")

  @@index([data_group_id], map: "data_group_id")
  @@index([screen_id], map: "screen_id")
}

model datapoint {
  id                Int            @id @default(autoincrement())
  name              String?        @db.VarChar(100)
  datapoint_type_id Int
  definition        String         @db.LongText
  datapoint_type    datapoint_type @relation(fields: [datapoint_type_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "datapoint_ibfk_1")

  @@index([datapoint_type_id], map: "datapoint_type_id")
}

model datapoint_type {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(100)
  action_class String      @db.VarChar(100)
  datapoint    datapoint[]
}

model display_field {
  display_field_id       BigInt                   @id @default(autoincrement())
  report_group_id        BigInt
  name                   String                   @db.VarChar(255)
  label                  String                   @db.VarChar(255)
  field_alias            String?                  @db.VarChar(255)
  is_sortable            String                   @db.VarChar(10)
  sort_order             String?                  @db.VarChar(255)
  sort_field             String?                  @db.VarChar(255)
  element_type           String                   @db.VarChar(255)
  element_property       String                   @db.VarChar(1000)
  width                  String                   @db.VarChar(255)
  is_exportable          String?                  @db.VarChar(10)
  text_alignment_style   String?                  @db.VarChar(20)
  is_value_list          Boolean                  @default(false)
  display_field_group_id Int?                     @db.UnsignedInt
  default_value          String?                  @db.VarChar(255)
  is_encrypted           Boolean                  @default(false)
  is_meta                Boolean                  @default(false)
  report_group           report_group             @relation(fields: [report_group_id], references: [report_group_id], onDelete: Cascade, onUpdate: Restrict, map: "display_field_ibfk_1")
  display_field_group    display_field_group?     @relation(fields: [display_field_group_id], references: [id], onUpdate: Restrict, map: "display_field_ibfk_2")
  selected_display_field selected_display_field[]

  @@index([display_field_group_id], map: "display_field_group_id")
  @@index([report_group_id], map: "report_group_id")
}

model display_field_group {
  id                           Int                            @id @default(autoincrement()) @db.UnsignedInt
  report_group_id              BigInt
  name                         String                         @db.VarChar(255)
  is_list                      Boolean                        @default(false)
  composite_display_field      composite_display_field[]
  display_field                display_field[]
  report_group                 report_group                   @relation(fields: [report_group_id], references: [report_group_id], onDelete: Cascade, onUpdate: Restrict, map: "display_field_group_ibfk_1")
  selected_display_field_group selected_display_field_group[]
  summary_display_field        summary_display_field[]

  @@index([report_group_id], map: "report_group_id")
}

model education {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(100)
  emp_education emp_education[]
}

model email {
  id              Int               @id @default(autoincrement())
  name            String            @unique(map: "name") @db.VarChar(100)
  email_processor email_processor[]
  email_template  email_template[]
}

model email_configuration {
  id                 Int     @id @default(autoincrement())
  mail_type          String? @db.VarChar(50)
  sent_as            String  @db.VarChar(250)
  smtp_host          String? @db.VarChar(250)
  smtp_port          Int?
  smtp_username      String? @db.VarChar(250)
  smtp_password      String? @db.VarChar(250)
  smtp_auth_type     String? @db.VarChar(50)
  smtp_security_type String? @db.VarChar(50)
}

model email_notification {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(100)
  is_enable        Int
  email_subscriber email_subscriber[]
}

model email_processor {
  id         Int     @id @default(autoincrement())
  email_id   Int
  class_name String? @db.VarChar(100)
  email      email   @relation(fields: [email_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "email_processor_ibfk_1")

  @@index([email_id], map: "email_id")
}

model email_subscriber {
  id                 Int                @id @default(autoincrement())
  notification_id    Int
  name               String             @db.VarChar(100)
  email              String             @db.VarChar(100)
  email_notification email_notification @relation(fields: [notification_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "email_subscriber_ibfk_1")

  @@index([notification_id], map: "notification_id")
}

model email_template {
  id             Int     @id @default(autoincrement())
  email_id       Int
  locale         String? @db.VarChar(20)
  performer_role String? @db.VarChar(50)
  recipient_role String? @db.VarChar(50)
  subject        String? @db.VarChar(255)
  body           String? @db.Text
  email          email   @relation(fields: [email_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "email_template_ibfk_1")

  @@index([email_id], map: "email_id")
}

model emp_education {
  id           Int       @id @default(autoincrement())
  emp_number   Int
  education_id Int
  institute    String?   @db.VarChar(100)
  major        String?   @db.VarChar(100)
  year         Decimal?  @db.Decimal(4, 0)
  score        String?   @db.VarChar(25)
  start_date   DateTime? @db.Date
  end_date     DateTime? @db.Date
  employee     employee  @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_education_ibfk_1")
  education    education @relation(fields: [education_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "emp_education_ibfk_2")

  @@index([education_id], map: "education_id")
  @@index([emp_number], map: "emp_number")
}

model emp_license {
  emp_number          Int
  license_id          Int
  license_no          String?   @db.VarChar(50)
  license_issued_date DateTime? @db.Date
  license_expiry_date DateTime? @db.Date
  employee            employee  @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_license_ibfk_1")
  license             license   @relation(fields: [license_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "emp_license_ibfk_2")

  @@id([emp_number, license_id])
  @@index([license_id], map: "license_id")
}

model emp_reporting_method {
  reporting_method_id   Int            @id @default(autoincrement())
  reporting_method_name String         @db.VarChar(100)
  emp_reportto          emp_reportto[]
}

model emp_termination {
  id                                                Int                     @id @default(autoincrement())
  emp_number                                        Int?
  reason_id                                         Int?
  termination_date                                  DateTime                @db.Date
  note                                              String?                 @db.VarChar(255)
  employee_employee_termination_idToemp_termination employee[]              @relation("employee_termination_idToemp_termination")
  emp_termination_reason                            emp_termination_reason? @relation(fields: [reason_id], references: [id], onUpdate: Restrict, map: "emp_termination_ibfk_1")
  employee_emp_termination_emp_numberToemployee     employee?               @relation("emp_termination_emp_numberToemployee", fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "emp_termination_ibfk_2")

  @@index([emp_number], map: "emp_number")
  @@index([reason_id], map: "reason_id")
}

model emp_termination_reason {
  id              Int               @id @default(autoincrement())
  name            String?           @db.VarChar(100)
  emp_termination emp_termination[]
}

model employee_event {
  event_id     Int       @id @default(autoincrement())
  employee_id  Int       @default(0)
  type         String?   @db.VarChar(45)
  event        String?   @db.VarChar(45)
  note         String?   @db.VarChar(150)
  created_date DateTime? @db.DateTime(0)
  created_by   String?   @db.VarChar(45)
}

model employee_subscription {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  employee_id Int
  status      Int      @db.SmallInt
  created_at  DateTime @db.Date
}

model employee_work_shift {
  work_shift_id Int        @default(autoincrement())
  emp_number    Int
  work_shift    work_shift @relation(fields: [work_shift_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "employee_work_shift_ibfk_1")
  employee      employee   @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "employee_work_shift_ibfk_2")

  @@id([work_shift_id, emp_number])
  @@index([emp_number], map: "emp_number")
}

model employment_status {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(60)
  employee       employee[]
  jobtit_empstat jobtit_empstat[]
}

model filter_field {
  filter_field_id       BigInt                  @id
  report_group_id       BigInt
  name                  String                  @db.VarChar(255)
  where_clause_part     String                  @db.MediumText
  filter_field_widget   String?                 @db.VarChar(255)
  condition_no          Int
  required              String?                 @db.VarChar(10)
  report_group          report_group            @relation(fields: [report_group_id], references: [report_group_id], onDelete: Cascade, onUpdate: Restrict, map: "filter_field_ibfk_1")
  selected_filter_field selected_filter_field[]

  @@index([report_group_id], map: "report_group_id")
}

model group_field {
  group_field_id        BigInt                  @id
  name                  String                  @db.VarChar(255)
  group_by_clause       String                  @db.MediumText
  group_field_widget    String?                 @db.VarChar(255)
  available_group_field available_group_field[]
  selected_group_field  selected_group_field[]
}

model holiday {
  id                     Int                  @id @default(autoincrement()) @db.UnsignedInt
  description            String?              @db.Text
  date                   DateTime?            @db.Date
  recurring              Int?                 @default(0) @db.UnsignedTinyInt
  length                 Int?                 @db.UnsignedInt
  operational_country_id Int?                 @db.UnsignedInt
  operational_country    operational_country? @relation(fields: [operational_country_id], references: [id], onDelete: Cascade, map: "fk_holiday_operational_country")

  @@index([operational_country_id], map: "fk_holiday_operational_country")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model home_page {
  id           Int       @id @default(autoincrement())
  user_role_id Int
  action       String?   @db.VarChar(255)
  enable_class String?   @db.VarChar(100)
  priority     Int       @default(0)
  user_role    user_role @relation(fields: [user_role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "home_page_ibfk_1")

  @@index([user_role_id], map: "user_role_id")
}

model i18n_group {
  id               Int                @id @default(autoincrement())
  name             String?            @db.VarChar(255)
  title            String?            @db.VarChar(255)
  i18n_lang_string i18n_lang_string[]
}

model i18n_lang_string {
  id             Int              @id @default(autoincrement())
  unit_id        Int
  source_id      Int?
  group_id       Int?
  value          String           @db.Text
  note           String?          @db.Text
  version        String?          @db.VarChar(20)
  i18n_group     i18n_group?      @relation(fields: [group_id], references: [id], onUpdate: Restrict, map: "groupId")
  i18n_source    i18n_source?     @relation(fields: [source_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sourceId")
  i18n_translate i18n_translate[]

  @@index([group_id], map: "groupId")
  @@index([source_id], map: "sourceId")
}

model i18n_language {
  id             Int              @id @default(autoincrement())
  name           String?          @db.VarChar(255)
  code           String           @unique(map: "code") @db.VarChar(100)
  enabled        Int              @default(1) @db.UnsignedTinyInt
  added          Int              @default(0) @db.UnsignedTinyInt
  modified_at    DateTime?        @db.DateTime(0)
  i18n_translate i18n_translate[]
}

model i18n_source {
  id               Int                @id @default(autoincrement())
  source           String             @db.MediumText
  modified_at      DateTime?          @db.DateTime(0)
  i18n_lang_string i18n_lang_string[]
}

model i18n_translate {
  id               Int              @id @default(autoincrement())
  lang_string_id   Int
  language_id      Int
  value            String?          @db.Text
  translated       Int?             @default(1) @db.UnsignedTinyInt
  customized       Int?             @default(0) @db.UnsignedTinyInt
  modified_at      DateTime         @default(now()) @db.Timestamp(0)
  i18n_lang_string i18n_lang_string @relation(fields: [lang_string_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "langStringId")
  i18n_language    i18n_language    @relation(fields: [language_id], references: [id], onUpdate: Restrict, map: "languageId")

  @@unique([lang_string_id, language_id], map: "translateUniqueId")
  @@index([language_id], map: "languageId")
}

model job_candidate {
  id                       Int                        @id @default(autoincrement())
  first_name               String                     @db.VarChar(30)
  middle_name              String?                    @db.VarChar(30)
  last_name                String                     @db.VarChar(30)
  email                    String                     @db.VarChar(100)
  contact_number           String?                    @db.VarChar(30)
  status                   Int
  comment                  String?                    @db.Text
  mode_of_application      Int
  date_of_application      DateTime                   @db.Date
  cv_file_id               Int?
  cv_text_version          String?                    @db.Text
  keywords                 String?                    @db.VarChar(255)
  added_person             Int?
  consent_to_keep_data     Boolean                    @default(false)
  employee                 employee?                  @relation(fields: [added_person], references: [emp_number], onUpdate: Restrict, map: "job_candidate_ibfk_1")
  job_candidate_attachment job_candidate_attachment[]
  job_candidate_history    job_candidate_history[]
  job_candidate_vacancy    job_candidate_vacancy[]
  job_interview            job_interview[]

  @@index([added_person], map: "added_person")
}

model job_candidate_attachment {
  id              Int           @id @default(autoincrement())
  candidate_id    Int
  file_name       String        @db.VarChar(200)
  file_type       String?       @db.VarChar(200)
  file_size       Int
  file_content    Bytes?        @db.MediumBlob
  attachment_type Int?
  job_candidate   job_candidate @relation(fields: [candidate_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "job_candidate_attachment_ibfk_1")

  @@index([candidate_id], map: "candidate_id")
}

model job_candidate_history {
  id                     Int            @id @default(autoincrement())
  candidate_id           Int
  vacancy_id             Int?
  candidate_vacancy_name String?        @db.VarChar(255)
  interview_id           Int?
  action                 Int
  performed_by           Int?
  performed_date         DateTime       @db.DateTime(0)
  note                   String?        @db.Text
  interviewers           String?        @db.VarChar(255)
  job_candidate          job_candidate  @relation(fields: [candidate_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "job_candidate_history_ibfk_1")
  job_vacancy            job_vacancy?   @relation(fields: [vacancy_id], references: [id], onUpdate: Restrict, map: "job_candidate_history_ibfk_2")
  job_interview          job_interview? @relation(fields: [interview_id], references: [id], onUpdate: Restrict, map: "job_candidate_history_ibfk_3")
  employee               employee?      @relation(fields: [performed_by], references: [emp_number], onUpdate: Restrict, map: "job_candidate_history_ibfk_4")

  @@index([candidate_id], map: "candidate_id")
  @@index([interview_id], map: "interview_id")
  @@index([performed_by], map: "performed_by")
  @@index([vacancy_id], map: "vacancy_id")
}

model job_candidate_vacancy {
  id            Int             @unique(map: "id") @default(autoincrement())
  candidate_id  Int
  vacancy_id    Int
  status        String          @db.VarChar(100)
  applied_date  DateTime        @db.Date
  job_candidate job_candidate   @relation(fields: [candidate_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "job_candidate_vacancy_ibfk_1")
  job_vacancy   job_vacancy     @relation(fields: [vacancy_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "job_candidate_vacancy_ibfk_2")
  job_interview job_interview[]

  @@id([candidate_id, vacancy_id])
  @@index([vacancy_id], map: "vacancy_id")
}

model job_category {
  id       Int        @id @default(autoincrement())
  name     String?    @db.VarChar(60)
  employee employee[]
}

model job_interview {
  id                        Int                         @id @default(autoincrement())
  candidate_vacancy_id      Int?
  candidate_id              Int?
  interview_name            String                      @db.VarChar(100)
  interview_date            DateTime?                   @db.Date
  interview_time            DateTime?                   @db.Time(0)
  note                      String?                     @db.Text
  job_candidate_history     job_candidate_history[]
  job_candidate_vacancy     job_candidate_vacancy?      @relation(fields: [candidate_vacancy_id], references: [id], onUpdate: Restrict, map: "job_interview_ibfk_1")
  job_candidate             job_candidate?              @relation(fields: [candidate_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "job_interview_ibfk_2")
  job_interview_attachment  job_interview_attachment[]
  job_interview_interviewer job_interview_interviewer[]

  @@index([candidate_id], map: "candidate_id")
  @@index([candidate_vacancy_id], map: "candidate_vacancy_id")
}

model job_interview_attachment {
  id              Int           @id @default(autoincrement())
  interview_id    Int
  file_name       String        @db.VarChar(200)
  file_type       String?       @db.VarChar(200)
  file_size       Int
  file_content    Bytes?        @db.MediumBlob
  attachment_type Int?
  comment         String?       @db.VarChar(255)
  job_interview   job_interview @relation(fields: [interview_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "job_interview_attachment_ibfk_1")

  @@index([interview_id], map: "interview_id")
}

model job_interview_interviewer {
  interview_id   Int
  interviewer_id Int
  job_interview  job_interview @relation(fields: [interview_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "job_interview_interviewer_ibfk_1")
  employee       employee      @relation(fields: [interviewer_id], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "job_interview_interviewer_ibfk_2")

  @@id([interview_id, interviewer_id])
  @@index([interviewer_id], map: "interviewer_id")
}

model job_specification_attachment {
  id           Int       @id @default(autoincrement())
  job_title_id Int
  file_name    String    @db.VarChar(200)
  file_type    String?   @db.VarChar(200)
  file_size    Int
  file_content Bytes?    @db.MediumBlob
  job_title    job_title @relation(fields: [job_title_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "job_specification_attachment_ibfk_1")

  @@index([job_title_id], map: "job_title_id")
}

model job_title {
  id                           Int                            @id @default(autoincrement())
  job_title                    String                         @db.VarChar(100)
  job_description              String?                        @db.VarChar(400)
  note                         String?                        @db.VarChar(400)
  is_deleted                   Boolean?                       @default(false)
  employee                     employee[]
  jobtit_empstat               jobtit_empstat[]
  job_specification_attachment job_specification_attachment[]
  job_vacancy                  job_vacancy[]
}

model job_vacancy {
  id                     Int                      @id @default(autoincrement())
  job_title_code         Int
  hiring_manager_id      Int?
  name                   String                   @db.VarChar(100)
  description            String?                  @db.Text
  no_of_positions        Int?
  status                 Int
  published_in_feed      Boolean                  @default(false)
  defined_time           DateTime                 @db.DateTime(0)
  updated_time           DateTime                 @db.DateTime(0)
  job_candidate_history  job_candidate_history[]
  job_candidate_vacancy  job_candidate_vacancy[]
  job_title              job_title                @relation(fields: [job_title_code], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "job_vacancy_ibfk_1")
  employee               employee?                @relation(fields: [hiring_manager_id], references: [emp_number], onUpdate: Restrict, map: "job_vacancy_ibfk_2")
  job_vacancy_attachment job_vacancy_attachment[]

  @@index([hiring_manager_id], map: "hiring_manager_id")
  @@index([job_title_code], map: "job_title_code")
}

model job_vacancy_attachment {
  id              Int         @id @default(autoincrement())
  vacancy_id      Int
  file_name       String      @db.VarChar(200)
  file_type       String?     @db.VarChar(200)
  file_size       Int
  file_content    Bytes?      @db.MediumBlob
  attachment_type Int?
  comment         String?     @db.VarChar(255)
  job_vacancy     job_vacancy @relation(fields: [vacancy_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "job_vacancy_attachment_ibfk_1")

  @@index([vacancy_id], map: "vacancy_id")
}

model kpi {
  id             BigInt    @id @default(autoincrement())
  job_title_code String?   @db.VarChar(10)
  kpi_indicators String?   @db.VarChar(255)
  min_rating     Int?      @default(0)
  max_rating     Int?      @default(0)
  default_kpi    Int?      @db.SmallInt
  deleted_at     DateTime? @db.DateTime(0)
}

model language {
  id           Int            @id @default(autoincrement())
  name         String?        @db.VarChar(120)
  emp_language emp_language[]
}

model leave {
  id                      Int                       @id @default(autoincrement())
  date                    DateTime?                 @db.Date
  length_hours            Decimal?                  @db.Decimal(6, 2)
  length_days             Decimal?                  @db.Decimal(6, 4)
  status                  Int?                      @db.SmallInt
  comments                String?                   @db.VarChar(256)
  leave_request_id        Int                       @db.UnsignedInt
  leave_type_id           Int                       @db.UnsignedInt
  emp_number              Int
  start_time              DateTime?                 @db.Time(0)
  end_time                DateTime?                 @db.Time(0)
  duration_type           Int                       @default(0) @db.TinyInt
  leave_request           leave_request             @relation(fields: [leave_request_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "leave_ibfk_1")
  leave_type              leave_type                @relation(fields: [leave_type_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "leave_ibfk_2")
  leave_comment           leave_comment[]
  leave_leave_entitlement leave_leave_entitlement[]

  @@index([leave_request_id, leave_type_id, emp_number], map: "leave_request_type_emp")
  @@index([leave_type_id], map: "leave_type_id")
  @@index([leave_request_id, status], map: "request_status")
}

model leave_adjustment {
  id                           Int                            @id @default(autoincrement()) @db.UnsignedInt
  emp_number                   Int
  no_of_days                   Decimal                        @db.Decimal(19, 15)
  leave_type_id                Int                            @db.UnsignedInt
  from_date                    DateTime?                      @db.DateTime(0)
  to_date                      DateTime?                      @db.DateTime(0)
  credited_date                DateTime?                      @db.DateTime(0)
  note                         String?                        @db.VarChar(255)
  adjustment_type              Int                            @default(0) @db.UnsignedInt
  deleted                      Boolean                        @default(false)
  created_by_id                Int?
  created_by_name              String?                        @db.VarChar(255)
  leave_type                   leave_type                     @relation(fields: [leave_type_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "leave_adjustment_ibfk_1")
  employee                     employee                       @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "leave_adjustment_ibfk_2")
  user                         user?                          @relation(fields: [created_by_id], references: [id], onUpdate: Restrict, map: "leave_adjustment_ibfk_3")
  leave_entitlement_type       leave_entitlement_type         @relation(fields: [adjustment_type], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "leave_adjustment_ibfk_4")
  leave_entitlement_adjustment leave_entitlement_adjustment[]

  @@index([adjustment_type], map: "adjustment_type")
  @@index([created_by_id], map: "created_by_id")
  @@index([emp_number], map: "emp_number")
  @@index([leave_type_id], map: "leave_type_id")
}

model leave_comment {
  id                    Int       @id @default(autoincrement())
  leave_id              Int
  created               DateTime? @db.DateTime(0)
  created_by_name       String    @db.VarChar(255)
  created_by_id         Int?
  created_by_emp_number Int?
  comments              String?   @db.VarChar(255)
  leave                 leave     @relation(fields: [leave_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "leave_comment_ibfk_1")
  user                  user?     @relation(fields: [created_by_id], references: [id], onUpdate: Restrict, map: "leave_comment_ibfk_2")
  employee              employee? @relation(fields: [created_by_emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "leave_comment_ibfk_3")

  @@index([created_by_emp_number], map: "created_by_emp_number")
  @@index([created_by_id], map: "created_by_id")
  @@index([leave_id], map: "leave_id")
}

model leave_entitlement {
  id                           Int                            @id @default(autoincrement()) @db.UnsignedInt
  emp_number                   Int
  no_of_days                   Decimal                        @db.Decimal(19, 15)
  days_used                    Decimal                        @default(0.0000) @db.Decimal(8, 4)
  leave_type_id                Int                            @db.UnsignedInt
  from_date                    DateTime                       @db.DateTime(0)
  to_date                      DateTime?                      @db.DateTime(0)
  credited_date                DateTime?                      @db.DateTime(0)
  note                         String?                        @db.VarChar(255)
  entitlement_type             Int                            @db.UnsignedInt
  deleted                      Boolean                        @default(false)
  created_by_id                Int?
  created_by_name              String?                        @db.VarChar(255)
  leave_type                   leave_type                     @relation(fields: [leave_type_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "leave_entitlement_ibfk_1")
  employee                     employee                       @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "leave_entitlement_ibfk_2")
  leave_entitlement_type       leave_entitlement_type         @relation(fields: [entitlement_type], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "leave_entitlement_ibfk_3")
  user                         user?                          @relation(fields: [created_by_id], references: [id], onUpdate: Restrict, map: "leave_entitlement_ibfk_4")
  leave_entitlement_adjustment leave_entitlement_adjustment[]
  leave_leave_entitlement      leave_leave_entitlement[]

  @@index([created_by_id], map: "created_by_id")
  @@index([emp_number], map: "emp_number")
  @@index([entitlement_type], map: "entitlement_type")
  @@index([leave_type_id], map: "leave_type_id")
}

model leave_entitlement_adjustment {
  id                Int               @id @default(autoincrement())
  adjustment_id     Int               @db.UnsignedInt
  entitlement_id    Int               @db.UnsignedInt
  length_days       Decimal?          @db.Decimal(4, 2)
  leave_entitlement leave_entitlement @relation(fields: [entitlement_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "leave_entitlement_adjustment_ibfk_1")
  leave_adjustment  leave_adjustment  @relation(fields: [adjustment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "leave_entitlement_adjustment_ibfk_2")

  @@index([adjustment_id], map: "adjustment_id")
  @@index([entitlement_id], map: "entitlement_id")
}

model leave_entitlement_type {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  name              String              @db.VarChar(50)
  is_editable       Boolean             @default(false)
  leave_adjustment  leave_adjustment[]
  leave_entitlement leave_entitlement[]
}

model leave_leave_entitlement {
  id                Int               @id @default(autoincrement())
  leave_id          Int
  entitlement_id    Int               @db.UnsignedInt
  length_days       Decimal?          @db.Decimal(6, 4)
  leave_entitlement leave_entitlement @relation(fields: [entitlement_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "leave_leave_entitlement_ibfk_1")
  leave             leave             @relation(fields: [leave_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "leave_leave_entitlement_ibfk_2")

  @@index([entitlement_id], map: "entitlement_id")
  @@index([leave_id], map: "leave_id")
}

model leave_period_history {
  id                       Int      @id @default(autoincrement())
  leave_period_start_month Int
  leave_period_start_day   Int
  created_at               DateTime @db.Date
}

model leave_request {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  leave_type_id         Int                     @db.UnsignedInt
  date_applied          DateTime                @db.Date
  emp_number            Int
  comments              String?                 @db.VarChar(256)
  leave                 leave[]
  employee              employee                @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "leave_request_ibfk_1")
  leave_type            leave_type              @relation(fields: [leave_type_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "leave_request_ibfk_2")
  leave_request_comment leave_request_comment[]

  @@index([emp_number], map: "emp_number")
  @@index([leave_type_id], map: "leave_type_id")
}

model leave_request_comment {
  id                    Int           @id @default(autoincrement())
  leave_request_id      Int           @db.UnsignedInt
  created               DateTime?     @db.DateTime(0)
  created_by_name       String        @db.VarChar(255)
  created_by_id         Int?
  created_by_emp_number Int?
  comments              String?       @db.VarChar(255)
  leave_request         leave_request @relation(fields: [leave_request_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "leave_request_comment_ibfk_1")
  user                  user?         @relation(fields: [created_by_id], references: [id], onUpdate: Restrict, map: "leave_request_comment_ibfk_2")
  employee              employee?     @relation(fields: [created_by_emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "leave_request_comment_ibfk_3")

  @@index([created_by_emp_number], map: "created_by_emp_number")
  @@index([created_by_id], map: "created_by_id")
  @@index([leave_request_id], map: "leave_request_id")
}

model leave_status {
  id     Int    @id @default(autoincrement())
  status Int    @db.SmallInt
  name   String @db.VarChar(100)
}

model leave_type {
  id                                   Int                  @id @default(autoincrement()) @db.UnsignedInt
  name                                 String               @db.VarChar(50)
  deleted                              Boolean              @default(false)
  exclude_in_reports_if_no_entitlement Boolean              @default(false)
  operational_country_id               Int?                 @db.UnsignedInt
  leave                                leave[]
  leave_adjustment                     leave_adjustment[]
  leave_entitlement                    leave_entitlement[]
  leave_request                        leave_request[]
  operational_country                  operational_country? @relation(fields: [operational_country_id], references: [id], onUpdate: Restrict, map: "leave_type_ibfk_1")

  @@index([operational_country_id], map: "operational_country_id")
}

model license {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(100)
  emp_license emp_license[]
}

model location {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(110)
  country_code  String          @db.VarChar(3)
  province      String?         @db.VarChar(60)
  city          String?         @db.VarChar(60)
  address       String?         @db.VarChar(255)
  zip_code      String?         @db.VarChar(35)
  phone         String?         @db.VarChar(35)
  fax           String?         @db.VarChar(35)
  notes         String?         @db.VarChar(255)
  emp_locations emp_locations[]
  country       country         @relation(fields: [country_code], references: [cou_code], onDelete: Cascade, onUpdate: Restrict, map: "location_ibfk_1")

  @@index([country_code], map: "country_code")
}

model login {
  id                   Int       @id @default(autoincrement())
  user_id              BigInt
  user_name            String?   @db.VarChar(255)
  user_role_name       String    @db.Text
  user_role_predefined Boolean
  login_time           DateTime? @default(now()) @db.Timestamp(0)
}

model marketplace_addon {
  addon_id    Int                     @id
  title       String?                 @db.VarChar(100)
  date        DateTime?               @db.Timestamp(0)
  status      String?                 @db.VarChar(30)
  version     String?                 @db.VarChar(100)
  plugin_name String?                 @db.VarChar(255)
  type        marketplace_addon_type? @default(free)
}

model membership {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(100)
  emp_member_detail emp_member_detail[]
}

model menu_item {
  id         Int     @id @default(autoincrement())
  menu_title String  @db.VarChar(255)
  screen_id  Int?
  parent_id  Int?
  level      Int     @db.TinyInt
  order_hint Int
  url_extras String? @db.VarChar(255)
  status     Int     @default(1) @db.TinyInt
  screen     screen? @relation(fields: [screen_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "menu_item_ibfk_1")

  @@index([screen_id], map: "screen_id")
}

model modules {
  id                  Int                   @id @default(autoincrement())
  name                String?               @db.VarChar(120)
  status              Int?                  @default(1) @db.TinyInt
  module_default_page module_default_page[]
  screen              screen[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model module_default_page {
  id           Int       @id @default(autoincrement())
  module_id    Int
  user_role_id Int
  action       String?   @db.VarChar(255)
  enable_class String?   @db.VarChar(100)
  priority     Int       @default(0)
  user_role    user_role @relation(fields: [user_role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_default_page_ibfk_1")
  module       modules   @relation(fields: [module_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_default_page_ibfk_2")

  @@index([module_id], map: "module_id")
  @@index([user_role_id], map: "user_role_id")
}

model nationality {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(100)
  employee employee[]
}

model oauth_access_token {
  access_token String   @id @db.VarChar(40)
  client_id    String   @db.VarChar(80)
  user_id      String?  @db.VarChar(255)
  expires      DateTime @db.Timestamp(0)
  scope        String?  @db.VarChar(2000)
}

model oauth_authorization_code {
  authorization_code String   @id @db.VarChar(40)
  client_id          String   @db.VarChar(80)
  user_id            String?  @db.VarChar(255)
  redirect_uri       String   @db.VarChar(2000)
  expires            DateTime @db.Timestamp(0)
  scope              String?  @db.VarChar(2000)
}

model oauth_client {
  client_id     String  @id @db.VarChar(80)
  client_secret String  @db.VarChar(80)
  redirect_uri  String  @db.VarChar(2000)
  grant_types   String? @db.VarChar(80)
  scope         String? @db.VarChar(4000)
}

model oauth_refresh_token {
  refresh_token String   @id @db.VarChar(40)
  client_id     String   @db.VarChar(80)
  user_id       String?  @db.VarChar(255)
  expires       DateTime @db.Timestamp(0)
  scope         String?  @db.VarChar(2000)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model oauth_scope {
  scope      String? @db.Text
  is_default Boolean @default(false)

  @@ignore
}

model oauth_user {
  username   String  @id @db.VarChar(255)
  password   String? @db.VarChar(2000)
  first_name String? @db.VarChar(255)
  last_name  String? @db.VarChar(255)
}

model openid_provider {
  id                          Int                           @id @default(autoincrement())
  provider_name               String?                       @db.VarChar(40)
  provider_url                String?                       @db.VarChar(255)
  status                      Boolean                       @default(true)
  auth_provider_extra_details auth_provider_extra_details[]
  openid_user_identity        openid_user_identity[]        @ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model openid_user_identity {
  user_id         Int?
  provider_id     Int?
  user_identity   String?          @db.VarChar(255)
  user            user?            @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "user_identity_ibfk_1")
  openid_provider openid_provider? @relation(fields: [provider_id], references: [id], onUpdate: Restrict, map: "user_identity_ibfk_2")

  @@index([user_id], map: "user_identity_ibfk_1")
  @@index([provider_id], map: "user_identity_ibfk_2")
  @@ignore
}

model operational_country {
  id           Int          @id @default(autoincrement()) @db.UnsignedInt
  country_code String?      @db.Char(2)
  holiday      holiday[]
  leave_type   leave_type[]
  country      country?     @relation(fields: [country_code], references: [cou_code], onDelete: Cascade, map: "fk_operational_country_country")
  work_week    work_week[]

  @@index([country_code], map: "fk_operational_country_country")
}

model organization_gen_info {
  id                  Int     @id @default(autoincrement())
  name                String  @db.VarChar(100)
  tax_id              String? @db.VarChar(30)
  registration_number String? @db.VarChar(30)
  phone               String? @db.VarChar(30)
  fax                 String? @db.VarChar(30)
  email               String? @db.VarChar(30)
  country             String? @db.VarChar(30)
  province            String? @db.VarChar(30)
  city                String? @db.VarChar(30)
  zip_code            String? @db.VarChar(30)
  street1             String? @db.VarChar(100)
  street2             String? @db.VarChar(100)
  note                String? @db.VarChar(255)
}

model pay_grade {
  id                 Int                  @id @default(autoincrement())
  name               String?              @unique(map: "name") @db.VarChar(60)
  emp_basicsalary    emp_basicsalary[]
  pay_grade_currency pay_grade_currency[]
}

model pay_grade_currency {
  pay_grade_id  Int
  currency_id   String        @default("") @db.VarChar(6)
  min_salary    Float?
  max_salary    Float?
  currency_type currency_type @relation(fields: [currency_id], references: [currency_id], onDelete: Cascade, onUpdate: Restrict, map: "pay_grade_currency_ibfk_1")
  pay_grade     pay_grade     @relation(fields: [pay_grade_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "pay_grade_currency_ibfk_2")

  @@id([pay_grade_id, currency_id])
  @@index([currency_id], map: "currency_id")
}

model performance_review {
  id                Int               @id @default(autoincrement())
  status_id         Int?
  employee_number   Int?
  work_period_start DateTime?         @db.Date
  work_period_end   DateTime?         @db.Date
  job_title_code    Int?
  department_id     Int?
  due_date          DateTime?         @db.Date
  completed_date    DateTime?         @db.Date
  activated_date    DateTime?         @db.DateTime(0)
  final_comment     String?           @db.Text
  final_rate        Decimal?          @db.Decimal(18, 2)
  employee          employee?         @relation(fields: [employee_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "performance_review_ibfk_1")
  reviewer          reviewer[]
  reviewer_rating   reviewer_rating[]

  @@index([employee_number], map: "employee_number")
}

model performance_track {
  id                                              Int                            @id @default(autoincrement())
  emp_number                                      Int
  tracker_name                                    String                         @db.VarChar(200)
  added_date                                      DateTime?                      @db.Timestamp(0)
  added_by                                        Int?
  status                                          Int?
  modified_date                                   DateTime?                      @db.Timestamp(0)
  employee_performance_track_emp_numberToemployee employee                       @relation("performance_track_emp_numberToemployee", fields: [emp_number], references: [emp_number], onDelete: Cascade, map: "performance_track_fk1")
  employee_performance_track_added_byToemployee   employee?                      @relation("performance_track_added_byToemployee", fields: [added_by], references: [emp_number], onDelete: Cascade, map: "performance_track_fk2")
  performance_tracker_log                         performance_tracker_log[]
  performance_tracker_reviewer                    performance_tracker_reviewer[]

  @@index([emp_number], map: "performance_track_fk1_idx")
  @@index([added_by], map: "performance_track_fk2_idx")
}

model performance_tracker_log {
  id                   Int                @id @default(autoincrement())
  performance_track_id Int?
  log                  String?            @db.VarChar(150)
  comment              String?            @db.VarChar(3000)
  status               Int?
  added_date           DateTime?          @db.Timestamp(0)
  modified_date        DateTime?          @db.Timestamp(0)
  reviewer_id          Int?
  achievement          String?            @db.VarChar(45)
  user_id              Int?
  user                 user?              @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_performance_tracker_log_1")
  performance_track    performance_track? @relation(fields: [performance_track_id], references: [id], onDelete: Cascade, map: "performance_tracker_log_fk1")
  employee             employee?          @relation(fields: [reviewer_id], references: [emp_number], onDelete: Cascade, map: "performance_tracker_log_fk2")

  @@index([user_id], map: "fk_performance_tracker_log_1")
  @@index([performance_track_id], map: "performance_tracker_log_fk1_idx")
  @@index([reviewer_id], map: "performance_tracker_log_fk2_idx")
}

model performance_tracker_reviewer {
  id                   Int               @id @default(autoincrement())
  performance_track_id Int
  reviewer_id          Int
  added_date           DateTime?         @db.Timestamp(0)
  status               Int?
  performance_track    performance_track @relation(fields: [performance_track_id], references: [id], onDelete: Cascade, map: "performance_tracker_reviewer_fk1")
  employee             employee          @relation(fields: [reviewer_id], references: [emp_number], onDelete: Cascade, map: "performance_tracker_reviewer_fk2")

  @@index([performance_track_id], map: "performance_tracker_reviewer_fk1_idx")
  @@index([reviewer_id], map: "performance_tracker_reviewer_fk2_idx")
}

model plugin {
  id      Int     @id @default(autoincrement())
  name    String  @db.VarChar(100)
  version String? @db.VarChar(32)

  @@index([name], map: "name")
}

model project {
  project_id       Int                @unique @default(autoincrement())
  customer_id      Int
  name             String?            @db.VarChar(100)
  description      String?            @db.VarChar(256)
  is_deleted       Boolean?           @default(false)
  project_activity project_activity[]
  project_admin    project_admin[]

  @@id([project_id, customer_id])
  @@index([customer_id], map: "customer_id")
}

model project_activity {
  activity_id Int      @id @default(autoincrement())
  project_id  Int
  name        String?  @db.VarChar(110)
  is_deleted  Boolean? @default(false)
  project     project  @relation(fields: [project_id], references: [project_id], onDelete: Cascade, onUpdate: Restrict, map: "project_activity_ibfk_1")

  @@index([project_id], map: "project_id")
}

model project_admin {
  project_id Int
  emp_number Int
  project    project  @relation(fields: [project_id], references: [project_id], onDelete: Cascade, onUpdate: Restrict, map: "project_admin_ibfk_1")
  employee   employee @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "project_admin_ibfk_2")

  @@id([project_id, emp_number])
  @@index([emp_number], map: "emp_number")
}

model registration_event_queue {
  id           Int       @id @default(autoincrement())
  event_type   Int
  published    Int       @default(0) @db.UnsignedTinyInt
  event_time   DateTime? @db.DateTime(0)
  publish_time DateTime? @db.DateTime(0)
  data         String?   @db.Text
}

model report {
  report_id                        BigInt                             @id @default(autoincrement())
  name                             String                             @db.VarChar(255)
  report_group_id                  BigInt
  use_filter_field                 Boolean
  type                             String?                            @db.VarChar(255)
  report_group                     report_group                       @relation(fields: [report_group_id], references: [report_group_id], onDelete: Cascade, onUpdate: Restrict, map: "report_ibfk_1")
  selected_composite_display_field selected_composite_display_field[]
  selected_display_field           selected_display_field[]
  selected_display_field_group     selected_display_field_group[]
  selected_filter_field            selected_filter_field[]
  selected_group_field             selected_group_field[]

  @@index([report_group_id], map: "report_group_id")
}

model report_group {
  report_group_id         BigInt                    @id
  name                    String                    @db.VarChar(255)
  core_sql                String                    @db.MediumText
  composite_display_field composite_display_field[]
  display_field           display_field[]
  display_field_group     display_field_group[]
  filter_field            filter_field[]
  report                  report[]
}

model reset_password {
  id                 BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  reset_email        String   @db.VarChar(60)
  reset_request_date DateTime @db.Timestamp(0)
  reset_code         String   @db.VarChar(200)
}

model rest_api_usage {
  id         Int      @id @default(autoincrement())
  client_id  String?  @db.VarChar(255)
  user_id    String?  @db.VarChar(255)
  scope      String?  @db.VarChar(20)
  method     String?  @db.VarChar(20)
  module     String?  @db.VarChar(20)
  action     String?  @db.VarChar(50)
  path       String?  @db.VarChar(255)
  parameters String?  @db.TinyText
  created_at DateTime @default(now()) @db.Timestamp(0)
}

model reviewer {
  id                 Int                 @id @default(autoincrement())
  review_id          Int?
  employee_number    Int?
  status             Int?
  reviewer_group_id  Int?
  completed_date     DateTime?           @db.DateTime(0)
  comment            String?             @db.Text
  performance_review performance_review? @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "reviewer_ibfk_1")
  reviewer_rating    reviewer_rating[]

  @@index([review_id], map: "review_id")
}

model reviewer_group {
  id      Int     @id @default(autoincrement())
  name    String? @db.VarChar(50)
  piority Int?
}

model reviewer_rating {
  id                 Int                 @id @default(autoincrement())
  rating             Decimal?            @db.Decimal(18, 2)
  kpi_id             Int?
  review_id          Int?
  reviewer_id        Int
  comment            String?             @db.Text
  reviewer           reviewer            @relation(fields: [reviewer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "reviewer_rating_ibfk_1")
  performance_review performance_review? @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "reviewer_rating_ibfk_2")

  @@index([review_id], map: "review_id")
  @@index([reviewer_id], map: "reviewer_id")
}

model role_user_selection_rule {
  user_role_id        Int
  selection_rule_id   Int
  configurable_params String? @db.Text

  @@id([user_role_id, selection_rule_id])
}

model screen {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(100)
  module_id         Int
  action_url        String              @db.VarChar(255)
  data_group_screen data_group_screen[]
  menu_item         menu_item[]
  module            modules             @relation(fields: [module_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "screen_ibfk_1")
  user_role_screen  user_role_screen[]

  @@index([module_id], map: "module_id")
}

model selected_composite_display_field {
  id                         BigInt
  composite_display_field_id BigInt
  report_id                  BigInt
  report                     report                  @relation(fields: [report_id], references: [report_id], onDelete: Cascade, onUpdate: Restrict, map: "selected_composite_display_field_ibfk_1")
  composite_display_field    composite_display_field @relation(fields: [composite_display_field_id], references: [composite_display_field_id], onDelete: Cascade, onUpdate: Restrict, map: "selected_composite_display_field_ibfk_2")

  @@id([id, composite_display_field_id, report_id])
  @@index([composite_display_field_id], map: "composite_display_field_id")
  @@index([report_id], map: "report_id")
}

model selected_display_field {
  id               BigInt        @default(autoincrement())
  display_field_id BigInt
  report_id        BigInt
  report           report        @relation(fields: [report_id], references: [report_id], onDelete: Cascade, onUpdate: Restrict, map: "selected_display_field_ibfk_1")
  display_field    display_field @relation(fields: [display_field_id], references: [display_field_id], onDelete: Cascade, onUpdate: Restrict, map: "selected_display_field_ibfk_2")

  @@id([id, display_field_id, report_id])
  @@index([display_field_id], map: "display_field_id")
  @@index([report_id], map: "report_id")
}

model selected_display_field_group {
  id                     Int                 @id @default(autoincrement()) @db.UnsignedInt
  report_id              BigInt
  display_field_group_id Int                 @db.UnsignedInt
  report                 report              @relation(fields: [report_id], references: [report_id], onDelete: Cascade, onUpdate: Restrict, map: "selected_display_field_group_ibfk_1")
  display_field_group    display_field_group @relation(fields: [display_field_group_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "selected_display_field_group_ibfk_2")

  @@index([display_field_group_id], map: "display_field_group_id")
  @@index([report_id], map: "report_id")
}

model selected_filter_field {
  report_id          BigInt
  filter_field_id    BigInt
  filter_field_order BigInt
  value1             String?      @db.VarChar(255)
  value2             String?      @db.VarChar(255)
  where_condition    String?      @db.VarChar(255)
  type               String       @db.VarChar(255)
  report             report       @relation(fields: [report_id], references: [report_id], onDelete: Cascade, onUpdate: Restrict, map: "selected_filter_field_ibfk_1")
  filter_field       filter_field @relation(fields: [filter_field_id], references: [filter_field_id], onDelete: Cascade, onUpdate: Restrict, map: "selected_filter_field_ibfk_2")

  @@id([report_id, filter_field_id])
  @@index([filter_field_id], map: "filter_field_id")
  @@index([report_id], map: "report_id")
}

model selected_group_field {
  group_field_id           BigInt
  summary_display_field_id BigInt
  report_id                BigInt
  report                   report                @relation(fields: [report_id], references: [report_id], onDelete: Cascade, onUpdate: Restrict, map: "selected_group_field_ibfk_1")
  group_field              group_field           @relation(fields: [group_field_id], references: [group_field_id], onDelete: Cascade, onUpdate: Restrict, map: "selected_group_field_ibfk_2")
  summary_display_field    summary_display_field @relation(fields: [summary_display_field_id], references: [summary_display_field_id], onUpdate: Restrict, map: "selected_group_field_ibfk_3")

  @@id([group_field_id, summary_display_field_id, report_id])
  @@index([group_field_id], map: "group_field_id")
  @@index([report_id], map: "report_id")
  @@index([summary_display_field_id], map: "summary_display_field_id")
}

model skill {
  id          Int         @id @default(autoincrement())
  name        String?     @db.VarChar(120)
  description String?     @db.Text
  emp_skill   emp_skill[] @ignore
}

model subunit {
  id          Int        @id @default(autoincrement())
  name        String     @unique(map: "name") @db.VarChar(100)
  unit_id     String?    @db.VarChar(100)
  description String?    @db.VarChar(400)
  lft         Int?       @db.UnsignedSmallInt
  rgt         Int?       @db.UnsignedSmallInt
  level       Int?       @db.UnsignedSmallInt
  employee    employee[]
}

model summary_display_field {
  summary_display_field_id BigInt                 @id
  function                 String                 @db.VarChar(1000)
  label                    String                 @db.VarChar(255)
  field_alias              String?                @db.VarChar(255)
  is_sortable              String                 @db.VarChar(10)
  sort_order               String?                @db.VarChar(255)
  sort_field               String?                @db.VarChar(255)
  element_type             String                 @db.VarChar(255)
  element_property         String                 @db.VarChar(1000)
  width                    String                 @db.VarChar(255)
  is_exportable            String?                @db.VarChar(10)
  text_alignment_style     String?                @db.VarChar(20)
  is_value_list            Boolean                @default(false)
  display_field_group_id   Int?                   @db.UnsignedInt
  default_value            String?                @db.VarChar(255)
  selected_group_field     selected_group_field[]
  display_field_group      display_field_group?   @relation(fields: [display_field_group_id], references: [id], onUpdate: Restrict, map: "summary_display_field_ibfk_1")

  @@index([display_field_group_id], map: "display_field_group_id")
}

model theme {
  theme_id           Int     @id @default(autoincrement())
  theme_name         String? @db.VarChar(100)
  main_logo          Bytes?  @db.Blob
  variables          String? @db.Text
  social_media_icons String  @default("inline") @db.VarChar(100)
  login_banner       Bytes?  @db.Blob
}

model timesheet {
  timesheet_id BigInt   @id @default(autoincrement())
  state        String   @db.VarChar(255)
  start_date   DateTime @db.Date
  end_date     DateTime @db.Date
  employee_id  BigInt
}

model timesheet_action_log {
  timesheet_action_log_id BigInt   @id @default(autoincrement())
  comment                 String?  @db.VarChar(255)
  action                  String?  @db.VarChar(255)
  date_time               DateTime @db.Date
  performed_by            Int
  timesheet_id            BigInt
  user                    user     @relation(fields: [performed_by], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "timesheet_action_log_ibfk_1")

  @@index([performed_by], map: "performed_by")
  @@index([timesheet_id], map: "timesheet_id")
}

model timesheet_item {
  timesheet_item_id BigInt   @id @default(autoincrement())
  timesheet_id      BigInt
  date              DateTime @db.Date
  duration          BigInt?
  comment           String?  @db.Text
  project_id        BigInt
  employee_id       BigInt
  activity_id       BigInt

  @@index([activity_id], map: "activity_id")
  @@index([timesheet_id], map: "timesheet_id")
}

model upgrade_history {
  id              Int       @id @default(autoincrement())
  start_version   String?   @db.VarChar(30)
  end_version     String?   @db.VarChar(30)
  start_increment Int
  end_increment   Int
  upgraded_date   DateTime? @db.DateTime(0)
}

model user {
  id                      Int                       @id @default(autoincrement())
  user_role_id            Int
  emp_number              Int?
  user_name               String?                   @unique(map: "user_name") @db.VarChar(40)
  user_password           String?                   @db.VarChar(255)
  deleted                 Boolean                   @default(false)
  status                  Boolean                   @default(true)
  date_entered            DateTime?                 @db.DateTime(0)
  date_modified           DateTime?                 @db.DateTime(0)
  modified_user_id        Int?
  created_by              Int?
  mailnotifications       mailnotifications[]       @ignore
  leave_adjustment        leave_adjustment[]
  leave_comment           leave_comment[]
  leave_entitlement       leave_entitlement[]
  leave_request_comment   leave_request_comment[]
  openid_user_identity    openid_user_identity[]    @ignore
  performance_tracker_log performance_tracker_log[]
  timesheet_action_log    timesheet_action_log[]
  employee                employee?                 @relation(fields: [emp_number], references: [emp_number], onDelete: Cascade, onUpdate: Restrict, map: "user_ibfk_1")
  user_role               user_role                 @relation(fields: [user_role_id], references: [id], onUpdate: Restrict, map: "user_ibfk_2")

  @@index([created_by], map: "created_by")
  @@index([emp_number], map: "emp_number")
  @@index([modified_user_id], map: "modified_user_id")
  @@index([user_role_id], map: "user_role_id")
}

model user_role {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique(map: "user_role_name") @db.VarChar(255)
  display_name         String                 @db.VarChar(255)
  is_assignable        Boolean?               @default(false)
  is_predefined        Boolean?               @default(false)
  home_page            home_page[]
  module_default_page  module_default_page[]
  user                 user[]
  user_role_data_group user_role_data_group[]
  user_role_screen     user_role_screen[]
}

model user_role_data_group {
  id            Int         @id @default(autoincrement())
  user_role_id  Int?
  data_group_id Int?
  can_read      Int?        @db.TinyInt
  can_create    Int?        @db.TinyInt
  can_update    Int?        @db.TinyInt
  can_delete    Int?        @db.TinyInt
  self          Int?        @db.TinyInt
  user_role     user_role?  @relation(fields: [user_role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_role_data_group_ibfk_1")
  data_group    data_group? @relation(fields: [data_group_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_role_data_group_ibfk_2")

  @@index([data_group_id], map: "data_group_id")
  @@index([user_role_id], map: "user_role_id")
}

model user_role_screen {
  id           Int       @id @default(autoincrement())
  user_role_id Int
  screen_id    Int
  can_read     Boolean   @default(false)
  can_create   Boolean   @default(false)
  can_update   Boolean   @default(false)
  can_delete   Boolean   @default(false)
  user_role    user_role @relation(fields: [user_role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_role_screen_ibfk_1")
  screen       screen    @relation(fields: [screen_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_role_screen_ibfk_2")

  @@index([screen_id], map: "screen_id")
  @@index([user_role_id], map: "user_role_id")
}

model user_selection_rule {
  id                   Int     @id @default(autoincrement())
  name                 String  @db.VarChar(255)
  description          String? @db.VarChar(255)
  implementation_class String  @db.VarChar(255)
  rule_xml_data        String? @db.Text
}

model work_shift {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(250)
  hours_per_day       Decimal               @db.Decimal(4, 2)
  start_time          DateTime              @db.Time(0)
  end_time            DateTime              @db.Time(0)
  employee_work_shift employee_work_shift[]
}

model work_week {
  id                     Int                  @id @default(autoincrement()) @db.UnsignedInt
  operational_country_id Int?                 @db.UnsignedInt
  mon                    Int                  @default(0) @db.UnsignedTinyInt
  tue                    Int                  @default(0) @db.UnsignedTinyInt
  wed                    Int                  @default(0) @db.UnsignedTinyInt
  thu                    Int                  @default(0) @db.UnsignedTinyInt
  fri                    Int                  @default(0) @db.UnsignedTinyInt
  sat                    Int                  @default(0) @db.UnsignedTinyInt
  sun                    Int                  @default(0) @db.UnsignedTinyInt
  operational_country    operational_country? @relation(fields: [operational_country_id], references: [id], onDelete: Cascade, map: "fk_work_week_operational_country")

  @@index([operational_country_id], map: "fk_work_week_operational_country")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model workflow_state_machine {
  id              BigInt  @id @default(autoincrement())
  workflow        String  @db.VarChar(255)
  state           String  @db.VarChar(255)
  role            String  @db.VarChar(255)
  action          String  @db.VarChar(255)
  resulting_state String  @db.VarChar(255)
  roles_to_notify String? @db.Text
  priority        Int     @default(0)
}

model ws_consumer {
  app_id    Int     @id @default(autoincrement()) @db.UnsignedInt
  app_token String  @db.VarChar(10)
  app_name  String? @db.VarChar(50)
  status    Int     @default(1) @db.TinyInt
}

enum emp_dependents_ed_relationship_type {
  child
  other
}

enum marketplace_addon_type {
  paid
  free
}
